AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: PlatePad SAM template

Parameters:
  CognitoUserPoolArn:
    Type: String
    Description: The ARN of the Cognito User Pool
  CognitoUserId:
    Type: String
    Description: User Id used for Integration with Cognito
Resources:
  PlatePadGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: platePad_gateway
      StageName: prod
      Auth:
        Authorizers:
          PlatePadCognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
  # CORS lambda layer config
  PlatePadResponseLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: PlatePadResponseLayer
      Description: Layer for CORS headers
      ContentUri: platePadResponseLayer/
      CompatibleRuntimes:
        - nodejs14.x
  # auth endpoints definitions
  LogInFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: logIn
      CodeUri: src/lambdas/auth/logIn
      Handler: logIn.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
        - AmazonCognitoPowerUser
      Events:
        LogInApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/auth/login
            Method: POST
      Layers:
        - !Ref PlatePadResponseLayer
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserId
  SignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: signUp
      CodeUri: src/lambdas/auth/signUp
      Handler: signUp.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
        - AmazonCognitoPowerUser
      Events:
        SignUpApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/auth/signup
            Method: POST
      Layers:
        - !Ref PlatePadResponseLayer
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserId
  ConfirmEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: confirmEmail
      CodeUri: src/lambdas/auth/confirmEmail
      Handler: confirmEmail.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
        - AmazonCognitoPowerUser
      Events:
        ConfirmEmailApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/auth/confirm-email
            Method: POST
      Layers:
        - !Ref PlatePadResponseLayer
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserId
  # ingredients endpoints definitions
  SaveIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: saveIngredient
      CodeUri: src/lambdas/ingredients/saveIngredient
      Handler: saveIngredient.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        SaveIngredientApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/ingredients
            Method: POST
            Auth:
              Authorizer: PlatePadCognitoAuthorizer
      Layers:
        - !Ref PlatePadResponseLayer
  SaveIngredientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: saveIngredients
      CodeUri: src/lambdas/ingredients/saveIngredients
      Handler: saveIngredients.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        SaveIngredientsApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/ingredients/batch
            Method: POST
            Auth:
              Authorizer: PlatePadCognitoAuthorizer
      Layers:
        - !Ref PlatePadResponseLayer
  GetIngredientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getIngredients
      CodeUri: src/lambdas/ingredients/getIngredients
      Handler: getIngredients.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        GetIngredientApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/ingredients
            Method: GET
            Auth:
              Authorizer: PlatePadCognitoAuthorizer
      Layers:
        - !Ref PlatePadResponseLayer
  GetIngredientsGlobalFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getIngredientsGlobal
      CodeUri: src/lambdas/ingredients/getIngredientsGlobal
      Handler: getIngredientsGlobal.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        GetIngredientApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/global-ingredients
            Method: GET
      Layers:
        - !Ref PlatePadResponseLayer
  GetIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getIngredient
      CodeUri: src/lambdas/ingredients/getIngredient
      Handler: getIngredient.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        GetIngredientApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/ingredients/{name}
            Method: GET
            Auth:
              Authorizer: PlatePadCognitoAuthorizer
      Layers:
        - !Ref PlatePadResponseLayer
  DeleteIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteIngredient
      CodeUri: src/lambdas/ingredients/deleteIngredient
      Handler: deleteIngredient.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        DeleteIngredientApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/ingredients/{name}
            Method: DELETE
            Auth:
              Authorizer: PlatePadCognitoAuthorizer
      Layers:
        - !Ref PlatePadResponseLayer
  UpdateIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateIngredient
      CodeUri: src/lambdas/ingredients/updateIngredient
      Handler: updateIngredient.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        UpdateIngredientApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/ingredients/{name}
            Method: PATCH
            Auth:
              Authorizer: PlatePadCognitoAuthorizer
      Layers:
        - !Ref PlatePadResponseLayer
  # recipes endpoints definitions
  SaveRecipeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: saveRecipe
      CodeUri: src/lambdas/recipes/saveRecipe
      Handler: saveRecipe.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        SaveRecipeApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/recipes
            Method: POST
            Auth:
              Authorizer: PlatePadCognitoAuthorizer
      Layers:
        - !Ref PlatePadResponseLayer
  GetRecipesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getRecipes
      CodeUri: src/lambdas/recipes/getRecipes
      Handler: getRecipes.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        GetRecipesApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/recipes
            Method: GET
            Auth:
              Authorizer: PlatePadCognitoAuthorizer
      Layers:
        - !Ref PlatePadResponseLayer
  GetRecipesGlobalFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getRecipesGlobal
      CodeUri: src/lambdas/recipes/getRecipesGlobal
      Handler: getRecipesGlobal.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        GetRecipesApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/global-recipes
            Method: GET
      Layers:
        - !Ref PlatePadResponseLayer
  GetRecipeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getRecipe
      CodeUri: src/lambdas/recipes/getRecipe
      Handler: getRecipe.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        GetRecipeApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/recipes/{name}
            Method: GET
            Auth:
              Authorizer: PlatePadCognitoAuthorizer
      Layers:
        - !Ref PlatePadResponseLayer
  DeleteRecipeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteRecipe
      CodeUri: src/lambdas/recipes/deleteRecipe
      Handler: deleteRecipe.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        DeleteRecipeApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/recipes/{name}
            Method: DELETE
            Auth:
              Authorizer: PlatePadCognitoAuthorizer
      Layers:
        - !Ref PlatePadResponseLayer
  UpdateRecipeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateRecipe
      CodeUri: src/lambdas/recipes/updateRecipe
      Handler: updateRecipe.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        UpdateRecipeApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/recipes/{name}
            Method: PATCH
            Auth:
              Authorizer: PlatePadCognitoAuthorizer
      Layers:
        - !Ref PlatePadResponseLayer
  UploadIngredientImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: uploadIngredientImage
      CodeUri: src/lambdas/ingredients/uploadIngredientImage
      Handler: uploadIngredientImage.handler
      Runtime: nodejs14.x
      Role: !GetAtt PlatePadLambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        UploadIngredientImageApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/ingredients/{name}/image
            Method: POST
            Auth:
              Authorizer: PlatePadCognitoAuthorizer
      Layers:
        - !Ref PlatePadResponseLayer
      Environment:
        Variables:
          ENV_VARIABLE_NAME: value
  UploadRecipeImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: uploadRecipeImage
      CodeUri: src/lambdas/recipes/uploadRecipeImage
      Handler: uploadRecipeImage.handler
      Runtime: nodejs14.x
      Role: !GetAtt PlatePadLambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: "*"
      Events:
        UploadRecipeImageApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PlatePadGateway
            Path: /api/recipes/{name}/image
            Method: POST
            Auth:
              Authorizer: PlatePadCognitoAuthorizer
      Layers:
        - !Ref PlatePadResponseLayer
      Environment:
        Variables:
          ENV_VARIABLE_NAME: value
  #  Dynamo DB definitions
  PlatePadRecipesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: platepad_recipes
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: name
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  PlatePadIngredientsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: platepad_ingredients
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: name
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  PlatePadImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: plate-pad-images-bucket
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - "GET"
              - "PUT"
              - "POST"
              - "DELETE"
            AllowedOrigins:
              - "*"
            MaxAge: 3000
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
  PlatePadLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PlatePadS3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::plate-pad-images-bucket
                  - !Sub arn:aws:s3:::plate-pad-images-bucket/*
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: "*"
  PlatePadImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PlatePadImagesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource: arn:aws:s3:::plate-pad-images-bucket/*

Outputs:
  LogInFunctionArn:
    Value: !Ref LogInFunction
    Export:
      Name: LogInFunctionArn
  SignUpFunctionArn:
    Value: !Ref SignUpFunction
    Export:
      Name: SignUpFunctionArn
  ConfirmEmailFunctionArn:
    Value: !Ref ConfirmEmailFunction
    Export:
      Name: ConfirmEmailFunctionArn
  SaveIngredientFunctionArn:
    Value: !Ref SaveIngredientFunction
    Export:
      Name: SaveIngredientFunctionArn
  GetIngredientFunctionArn:
    Value: !Ref GetIngredientFunction
    Export:
      Name: GetIngredientFunctionArn
  ImagesBucketName:
    Description: Name of the S3 bucket to hold images
    Value: !Ref PlatePadImagesBucket
    Export:
      Name: PlatePadImagesBucketArn
